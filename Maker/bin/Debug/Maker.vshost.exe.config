<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<configSections>
		<!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
		<section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
	 <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
   <section name="Maker.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
  </sectionGroup>
 </configSections>
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
	</startup>
	<connectionStrings>
		<add name="NorthwindEntities" connectionString="metadata=res://*/Model.Model.csdl|res://*/Model.Model.ssdl|res://*/Model.Model.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=.;initial catalog=Northwind;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
	</connectionStrings>
	<entityFramework>
		<defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
		<providers>
			<provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
		</providers>
	</entityFramework>

 <userSettings>
  <Maker.Properties.Settings>
   <setting name="FactoriesTemplates" serializeAs="String">
    <value>using DataFlow.Model;
using DataFlow.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace DataFlow.Factories
{
	internal class $entityType$Factory : IBuilder
	{
		#region Prepare basic data

		private $DBEntities$ entitiesDbContext = null;
		private IEnumerable&lt;XElement&gt; dataFromDB = null;

		public $entityType$Factory(IEnumerable&lt;XElement&gt; dataFromDB)
		{
			entitiesDbContext = new $DBEntities$();
			this.dataFromDB = dataFromDB;
		}

		#endregion Prepare basic data

		#region Interface implements

		public void ReadEntityFileToDB()
		{
			try
			{
				var primary = Utility.Deserialize&lt;$entityType$&gt;(typeof($entityType$).Name) as $entityType$[];

				foreach (var item in primary)
				{
					if (entitiesDbContext.$entitySet$.Any($entityKey$))
					{
						//todo
					}
					else
					{
						entitiesDbContext.$entitySet$.Add(item);	//todo
						entitiesDbContext.SaveChanges();
					}
				}
			}
			catch (Exception)
			{
				throw;
			}
		}

		public void CreateEntityFileToDestination()
		{
			try
			{
				List&lt;$entityType$&gt; entity = new List&lt;$entityType$&gt;();
				foreach (var item in entitiesDbContext.$entitySet$)
				{
					if (dataFromDB.Any($entityKey2$))
					{
						entity.Add(item);
					}
				}

				Utility.Serialize&lt;$entityType$&gt;(entity, typeof($entityType$).Name);
			}
			catch (Exception)
			{
				throw;
			}
		}

		#endregion Interface implements
	}
}</value>
   </setting>
  </Maker.Properties.Settings>
 </userSettings>
</configuration>